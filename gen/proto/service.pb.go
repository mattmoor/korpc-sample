// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package sample

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "sample.Request")
	proto.RegisterType((*Response)(nil), "sample.Response")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4e, 0xcc, 0x2d, 0xc8,
	0x49, 0x55, 0x92, 0xe6, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62,
	0xce, 0x2d, 0x4e, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x64, 0xb8, 0x38,
	0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x31, 0x65, 0x8d, 0xae, 0x33, 0x72, 0xf1, 0x06,
	0x83, 0x4d, 0x09, 0x86, 0x18, 0x2d, 0xa4, 0xc3, 0xc5, 0x1a, 0x9a, 0x97, 0x58, 0x54, 0x29, 0xc4,
	0xaf, 0x07, 0x31, 0x5e, 0x0f, 0x6a, 0xb6, 0x94, 0x00, 0x42, 0x00, 0x62, 0x9e, 0x12, 0x83, 0x90,
	0x21, 0x17, 0x47, 0x70, 0x49, 0x51, 0x6a, 0x62, 0xae, 0x67, 0x1e, 0x51, 0x1a, 0x34, 0x18, 0x85,
	0x8c, 0xb8, 0x38, 0x21, 0x5a, 0xfc, 0x4b, 0x4b, 0x88, 0xd2, 0x63, 0xc0, 0x28, 0x64, 0xc8, 0xc5,
	0x06, 0xd1, 0x43, 0xa4, 0x25, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0x30, 0x32, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x28, 0x3f, 0x8e, 0x83, 0x34, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SampleServiceClient interface {
	Unary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	StreamIn(ctx context.Context, opts ...grpc.CallOption) (SampleService_StreamInClient, error)
	StreamOut(ctx context.Context, in *Request, opts ...grpc.CallOption) (SampleService_StreamOutClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (SampleService_StreamClient, error)
}

type sampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSampleServiceClient(cc *grpc.ClientConn) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) Unary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sample.SampleService/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) StreamIn(ctx context.Context, opts ...grpc.CallOption) (SampleService_StreamInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SampleService_serviceDesc.Streams[0], "/sample.SampleService/StreamIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamInClient{stream}
	return x, nil
}

type SampleService_StreamInClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type sampleServiceStreamInClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamInClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sampleServiceStreamInClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) StreamOut(ctx context.Context, in *Request, opts ...grpc.CallOption) (SampleService_StreamOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SampleService_serviceDesc.Streams[1], "/sample.SampleService/StreamOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SampleService_StreamOutClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type sampleServiceStreamOutClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamOutClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (SampleService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SampleService_serviceDesc.Streams[2], "/sample.SampleService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamClient{stream}
	return x, nil
}

type SampleService_StreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type sampleServiceStreamClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sampleServiceStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleServiceServer is the server API for SampleService service.
type SampleServiceServer interface {
	Unary(context.Context, *Request) (*Response, error)
	StreamIn(SampleService_StreamInServer) error
	StreamOut(*Request, SampleService_StreamOutServer) error
	Stream(SampleService_StreamServer) error
}

// UnimplementedSampleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSampleServiceServer struct {
}

func (*UnimplementedSampleServiceServer) Unary(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (*UnimplementedSampleServiceServer) StreamIn(srv SampleService_StreamInServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIn not implemented")
}
func (*UnimplementedSampleServiceServer) StreamOut(req *Request, srv SampleService_StreamOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOut not implemented")
}
func (*UnimplementedSampleServiceServer) Stream(srv SampleService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterSampleServiceServer(s *grpc.Server, srv SampleServiceServer) {
	s.RegisterService(&_SampleService_serviceDesc, srv)
}

func _SampleService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.SampleService/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).Unary(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_StreamIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).StreamIn(&sampleServiceStreamInServer{stream})
}

type SampleService_StreamInServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type sampleServiceStreamInServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamInServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sampleServiceStreamInServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SampleService_StreamOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).StreamOut(m, &sampleServiceStreamOutServer{stream})
}

type SampleService_StreamOutServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type sampleServiceStreamOutServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamOutServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _SampleService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).Stream(&sampleServiceStreamServer{stream})
}

type SampleService_StreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type sampleServiceStreamServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sampleServiceStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _SampleService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIn",
			Handler:       _SampleService_StreamIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamOut",
			Handler:       _SampleService_StreamOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _SampleService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
